use std::thread;
fn main() {
    let v = vec![1, 2, 3];

    /**
    By adding the move keyword before the closure, we force the closure to take ownership of the values itâ€™s using rather than allowing Rust to infer that it should borrow the values. 
    */
    let handle = thread::spawn(move || {
        println!("Here's a vector: {:?}", v);
    });

    handle.join().unwrap();
}
